# -*- coding: utf-8 -*-
"""
Created on Wed Oct 16 16:33:47 2019

@author: giuseppec
"""
"""
http://rasbt.github.io/mlxtend/user_guide/frequent_patterns/association_rules/


Example 1 -- Generating Association Rules from Frequent Itemsets
The generate_rules takes dataframes of frequent itemsets as produced by the apriori function in mlxtend.association. To demonstrate 
the usage of the generate_rules method, we first create a pandas DataFrame of frequent itemsets as generated by the apriori function:
"""


import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori

###read from a file and create a list of lists
data = pd.read_csv('CLEANED-AssociateRuleMining_dataset.csv', encoding='latin-1')
num_records = len(data)
print(num_records)
data.head()
dataset = []
for i in range(0, num_records): #range of dataset csv
    dataset.append([str(data.values[i,j]) for j in range(0, 8)])

    

te = TransactionEncoder()
te_ary = te.fit(dataset).transform(dataset)
df = pd.DataFrame(te_ary, columns=te.columns_)
frequent_itemsets = apriori(df, min_support=0.45, use_colnames=True)

frequent_itemsets

"""
The generate_rules() function allows you to (1) specify your metric of interest and (2) the according threshold. 
Currently implemented measures are confidence and lift. Let's say you are interesting 
in rules derived from the frequent itemsets only if the level of confidence is above the
90 percent threshold (min_threshold=0.7):
"""

from mlxtend.frequent_patterns import association_rules
association_rules(frequent_itemsets, metric="confidence", min_threshold=0.7)



"""
If you are interested in rules according to a different metric of interest, you can simply adjust the metric 
and min_threshold arguments . E.g. if you are only interested in rules that have a 
lift score of >= 1.2, you would do the following:
"""

rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1.2)
rules


"""
Pandas DataFrames make it easy to filter the results further. Let's say we are ony interested in
rules that satisfy the following criteria:

at least 2 antecedents
a confidence > 0.75
a lift score > 1.2
We could compute the antecedent length as follows:
"""

rules["antecedent_len"] = rules["antecedents"].apply(lambda x: len(x))
rules


"""
Then, we can use pandas' selection syntax as shown below:
"""

rules[ (rules['antecedent_len'] >= 2) &
       (rules['confidence'] > 0.75) &
       (rules['lift'] > 1.2) ]


"""
Similarly, using the Pandas API, we can select entries based on the "antecedents" or "consequents" columns
"""

rules[rules['antecedents'] == {'#####', '#####'}]




